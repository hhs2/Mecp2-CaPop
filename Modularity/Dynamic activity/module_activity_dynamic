function [F1,F2] = module_activity_dynamic(BinEvents,adjT,M,minprom,smoothtype,FrRate,gen)
% H Smith, Cambridge, March 2021
% Analyse dynamic module activity over time for one recording

% INPUTS:
%   BinEvents = binary events matrix from recording
%   adjT = adjacency matrix. Code does not threshold matrix automatically
%   M = 1 by n vector containing assigned module for each node n
%   minprom = minimum peak prominence for activity detection
%   smoothtype:
%       = lowess: apply lowess filter to module activity
%       = movmean: apply moving mean filter to smooth module activity
%   FrRate = frame rate, time between frames (ms)
%   gen
%       = 'WT' wildtype data
%       = 'KO' knockout data

% OUTPUTS:
%   F1 = binary events matrix summed by module
%   F2 = summary of dynamic activity showing connection proportion and time

% REQUIRED FUNCTIONS:
%   aesthetics
%   module_dynamic_summary

c_wt = [0.471 0.674 0.188]; % green
c_ko = [0.027 0.306 0.659]; % dark blue

%%
% Convert frame length to time (seconds)
fs = FrRate/1000; % divide by 1000 to convert to seconds
time = 0:length(BinEvents)-1;
time = time * fs;

F1 = figure; hold on % Binary matrix split into modules
all_peaks = zeros(length(BinEvents),numel(unique(M))); % Binary events matrix split into modules
for j = 1:numel(unique(M))
    nodes = find(M == j); % Identify which cells are in module j
    events = BinEvents(:,nodes); % Copy their event matrices
    events = sum(events,2); % Sum for each frame
    if strcmp(smoothtype,'lowess')
        s_ev = smoothdata(events,'lowess'); % Smooth data with lowess filter
    elseif strcmp(smoothtype,'movmean')
        s_ev = movmean(events,5); % Smooth data with moving mean
    end
    plot(time,s_ev);
    findpeaks(s_ev,time,'MinPeakProminence',minprom);
    [~,locs] = findpeaks(s_ev,'MinPeakProminence',minprom);
    all_peaks(locs,j) = 1; % Store where activity is occurring
end
aesthetics; grid off
title('Binary events matrix summed by module')
ylabel('Summed value')
xlabel('Time (s)')

transfer_time = cell(1,numel(unique(M))); % Time from one module to another
transfer_module = cell(1,numel(unique(M))); % Which module is becoming active

for j = 1:numel(unique(M))
    [f] = find(all_peaks(:,j)); % Which frames show activity for module j
    for k = 1:length(f)-1 % For a given peak in activity for module j
        copy_bin = all_peaks; % Copy modular events matrix
        copy_bin(1:f(k),:) = 0; % Set all values up to this spike = 0
        copy_bin(f(k+1):end,:) = 0; % Set all values after the next spike = 0
        [row,col] = find(copy_bin); % Find activity in other modules 
        for m = 1:length(row)
            transfer_time{j} = [transfer_time{j} (time(row(m)) - time(f(k)))];
            transfer_module{j} = [transfer_module{j} col(m)];
        end
    end
end

% Select colour
if strcmp(gen,'WT')
    c = c_wt;
elseif strcmp(gen,'KO')
    c = c_ko;
end 

% Summarise data
F2 = module_dynamic_summary(adjT,M,transfer_module,transfer_time,c);
    
end
